// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum userGender {
  MAN
  WOMAN
}

model User {
  id        BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name      String     @db.VarChar(255)
  gender    userGender @default(MAN)
  email     String     @unique @db.VarChar(255)
  telephone String     @unique @db.VarChar(13)
  pin       String?    @db.Char(6)
  photoPath String?    @map("photo_path") @db.VarChar(255)
  Mentor    Mentor?

  @@map("user")
}

model Mentor {
  id         BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  user       User         @relation(fields: [userId], references: [id])
  userId     BigInt       @unique @map("user_id") @db.UnsignedBigInt
  Experience Experience[]
  Education  Education[]
  Skill      Skill[]
  Assistance Assistance[]

  @@map("mentors")
}

model Category {
  id                 Int                  @id @default(autoincrement()) @db.UnsignedInt
  name               String               @db.VarChar(255)
  AssistanceCategory AssistanceCategory[]

  @@map("categories")
}

model AssistanceCategory {
  Category     Category   @relation(fields: [categoryId], references: [id])
  categoryId   Int        @map("category_id") @db.UnsignedInt
  assistance   Assistance @relation(fields: [assistanceId], references: [id])
  assistanceId BigInt     @map("assistance_id") @db.UnsignedBigInt

  @@unique([categoryId, assistanceId])
  @@map("assistance_categories")
}

model AssistanceResource {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  imagePath   String?    @map("image_path") @db.VarChar(255)
  videoUrl    String?    @map("video_url") @db.VarChar(255)
  assitance   Assistance @relation(fields: [assitanceId], references: [id])
  assitanceId BigInt     @map("assitance_id") @db.UnsignedBigInt

  @@map("assistance_resources")
}

// enum orderStatus {
//   PROCESSED
//   CONFIRMED
//   SENT
//   FINISHED
//   CANCELLED
// }
//
// enum orderPaymentMethod {
//   CASH_ON_DELIVERY
//   TRANSFER
// }

//
// model Order {
//   id            BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
//   totalPrice    Int                @map("total_price") @db.UnsignedMediumInt
//   status        orderStatus        @default(PROCESSED)
//   paymentMethod orderPaymentMethod
//   createAt      DateTime           @default(now()) @map("create_at")
//   addressId     BigInt             @map("address_id") @db.UnsignedBigInt
//   expeditionId  Int                @map("expedition_id") @db.UnsignedSmallInt
//   user          User               @relation(fields: [userId], references: [id])
//   userId        BigInt             @map("user_id") @db.UnsignedBigInt
//   ProductOrder  ProductOrder[]
// }
//
// model ProductOrder {
//   product       Product @relation(fields: [productId], references: [id])
//   productId     BigInt  @map("product_id") @db.UnsignedBigInt
//   order         Order   @relation(fields: [orderId], references: [id])
//   orderId       BigInt  @map("order_id") @db.UnsignedBigInt
//   quantity      Int
//   subTotalPrice Int     @map("sub_total_price")
//   note          String? @db.VarChar(255)
//
//   @@unique([productId, orderId])
//   @@map("product_orders")
// }

enum EmploymentTypeEnum {
  FULL_TIME
  PART_TIME
  SELF_EMPLOYED
  FREELANCE
  CONTRACT
  INTERNSHIP
  APPRENTICESHIP
  SEASONAL
}

model Experience {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  positionName       String               @map("position_name") @db.VarChar(255)
  companyName        String               @map("company_name") @db.VarChar(255)
  employmentType     EmploymentTypeEnum   @map("employment_type")
  location           String               @db.VarChar(255)
  startDate          DateTime             @map("start_date") @db.Date
  endDate            DateTime             @map("end_date") @db.Date
  description        String?              @db.Text
  mentorId           BigInt               @map("mentor_id") @db.UnsignedBigInt
  mentor             Mentor               @relation(fields: [mentorId], references: [id])
  ExperienceResource ExperienceResource[]

  @@map("experiences")
}

model ExperienceResource {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  imagePath    String?    @map("image_path") @db.VarChar(255)
  videoUrl     String?    @map("video_url") @db.VarChar(255)
  experience   Experience @relation(fields: [experienceId], references: [id])
  experienceId BigInt     @map("experience_id") @db.UnsignedBigInt

  @@map("experience_resources")
}

model Education {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  name        String   @db.VarChar(255)
  degree      String   @db.VarChar(255)
  studyField  String   @map("study_field") @db.VarChar(255)
  startDate   DateTime @map("start_date") @db.Date
  endDate     DateTime @map("end_date") @db.Date
  activity    String   @db.Text
  society     String   @db.Text
  description String   @db.Text
  mentorId    BigInt   @map("mentor_id") @db.UnsignedBigInt
  mentor      Mentor   @relation(fields: [mentorId], references: [id])

  @@map("educations")
}

model Skill {
  id          BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  name        String  @db.VarChar(100)
  description String? @db.Text
  mentorId    BigInt  @map("mentor_id") @db.UnsignedBigInt
  mentor      Mentor  @relation(fields: [mentorId], references: [id])

  @@map("skills")
}

model Assistance {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  mentorId           BigInt               @map("mentor_id") @db.UnsignedBigInt
  mentor             Mentor               @relation(fields: [mentorId], references: [id])
  AssistanceCategory AssistanceCategory[]
  AssistanceResource AssistanceResource[]
}
