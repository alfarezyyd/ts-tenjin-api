// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserGender {
  MAN
  WOMAN
}

model User {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  uniqueId             String                 @unique @db.VarChar(512)
  name                 String                 @db.VarChar(255)
  gender               UserGender             @default(MAN)
  email                String                 @unique @db.VarChar(255)
  emailVerifiedAt      DateTime?              @map("email_verified_at") @db.Timestamp()
  password             String?                @db.VarChar(512)
  telephone            String?                @unique @db.VarChar(13)
  pin                  String?                @db.Char(6)
  photoPath            String?                @map("photo_path") @db.VarChar(255)
  isExternal           Boolean                @default(false) @map("is_external")
  totalBalance         BigInt                 @default(0) @map("total_balance") @db.UnsignedBigInt
  Mentor               Mentor?
  Order                Order[]
  Cart                 Cart?
  originUserChat       Chat[]                 @relation(name: "originUserRelation")
  destinationUserChat  Chat[]                 @relation(name: "destinationUserRelation")
  oneTimePasswordToken OneTimePasswordToken[]
  WithdrawRequest      WithdrawRequest[]
  Invoice              Invoice[]
  TopUpBalance         TopUpBalance[]

  @@map("users")
}

model Mentor {
  id                BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  user              User                @relation(fields: [userId], references: [id])
  userId            BigInt              @unique @map("user_id") @db.UnsignedBigInt
  Experience        Experience[]
  Education         Education[]
  Skill             Skill[]
  Assistance        Assistance[]
  Order             Order[]
  MentorAddress     MentorAddress?
  MentorBankAccount MentorBankAccount[]
  MentorResource    MentorResource[]
  WithdrawRequest   WithdrawRequest[]

  @@map("mentors")
}

model Category {
  id         Int          @id @default(autoincrement()) @db.UnsignedInt
  name       String       @unique @db.VarChar(255)
  logo       String       @db.VarChar(255)
  Assistance Assistance[]
  Tag        Tag[]

  @@map("categories")
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  SELF_EMPLOYED
  FREELANCE
  CONTRACT
  INTERNSHIP
  APPRENTICESHIP
  SEASONAL
}

model Experience {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  positionName       String               @map("position_name") @db.VarChar(255)
  companyName        String               @map("company_name") @db.VarChar(255)
  employmentType     EmploymentType       @map("employment_type")
  location           String               @db.VarChar(255)
  startDate          DateTime             @map("start_date") @db.Date
  endDate            DateTime             @map("end_date") @db.Date
  description        String?              @db.Text
  mentorId           BigInt               @map("mentor_id") @db.UnsignedBigInt
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @map("updated_at")
  Mentor             Mentor               @relation(fields: [mentorId], references: [id])
  ExperienceResource ExperienceResource[]

  @@map("experiences")
}

model ExperienceResource {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  imagePath    String?    @map("image_path") @db.VarChar(255)
  videoUrl     String?    @map("video_url") @db.VarChar(255)
  experience   Experience @relation(fields: [experienceId], references: [id])
  experienceId BigInt     @map("experience_id") @db.UnsignedBigInt

  @@map("experience_resources")
}

model Education {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  name        String   @db.VarChar(255)
  degree      String   @db.VarChar(255)
  studyField  String   @map("study_field") @db.VarChar(255)
  startDate   DateTime @map("start_date") @db.Date
  endDate     DateTime @map("end_date") @db.Date
  activity    String   @db.Text
  society     String   @db.Text
  description String   @db.Text
  mentorId    BigInt   @map("mentor_id") @db.UnsignedBigInt
  mentor      Mentor   @relation(fields: [mentorId], references: [id])

  @@map("educations")
}

model Skill {
  id          BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  name        String  @db.VarChar(100)
  description String? @db.Text
  mentorId    BigInt  @map("mentor_id") @db.UnsignedBigInt
  mentor      Mentor  @relation(fields: [mentorId], references: [id])

  @@map("skills")
}

model AssistanceResource {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  imagePath   String?    @map("image_path") @db.VarChar(255)
  videoUrl    String?    @map("video_url") @db.VarChar(255)
  assistance  Assistance @relation(fields: [assistantId], references: [id])
  assistantId BigInt     @map("assistance_id") @db.UnsignedBigInt

  @@map("assistance_resources")
}

enum AssistanceFormat {
  INDIVIDUAL
  GROUP
  HYBRID
}

model Tag {
  id             Int              @id @default(autoincrement()) @db.UnsignedInt
  name           String           @db.VarChar(255)
  icon           String           @db.VarChar(255)
  categoryId     Int              @map("category_id") @db.UnsignedInt
  category       Category         @relation(fields: [categoryId], references: [id])
  AssistanceTags AssistanceTags[]

  @@map("tags")
}

model Assistance {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  mentorId           BigInt               @map("mentor_id") @db.UnsignedBigInt
  mentor             Mentor               @relation(fields: [mentorId], references: [id])
  categoryId         Int                  @map("category_id") @db.UnsignedInt
  category           Category             @relation(fields: [categoryId], references: [id])
  topic              String               @db.VarChar(255)
  description        String               @db.Text
  durationMinutes    Int                  @map("duration_minutes") @db.UnsignedInt
  price              Int                  @db.UnsignedInt
  format             AssistanceFormat     @default(INDIVIDUAL)
  capacity           Int                  @db.UnsignedInt
  isActive           Boolean              @default(true) @map("is_active")
  ratingAverage      Decimal              @default(0) @map("rating_average") @db.Decimal(3, 2)
  Order              Order[]
  AssistanceTag      AssistanceTags[]
  AssistanceResource AssistanceResource[]
  AssistanceLanguage AssistanceLanguage[]
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime?            @default(now()) @map("updated_at")
  AssistanceCart     AssistanceCart[]
  Review             Review[]
  Invoice            Invoice[]

  @@unique([categoryId, mentorId])
  @@map("assistants")
}

model AssistanceTags {
  assistantId BigInt     @map("assistance_id") @db.UnsignedBigInt
  assistance  Assistance @relation(fields: [assistantId], references: [id])
  tagId       Int        @map("tag_id") @db.UnsignedInt
  tag         Tag        @relation(fields: [tagId], references: [id])

  @@unique([tagId, assistantId])
  @@map("assistance_tags")
}

enum OrderStatus {
  PROCESSED
  CONFIRMED
  FINISHED
  CANCELLED
}

enum OrderPaymentStatus {
  NOT_YET_PAID
  PAID
}

model Order {
  id                    String             @id @default(uuid()) @db.VarChar(255)
  assistantId           BigInt             @map("assistance_id") @db.UnsignedBigInt
  assistance            Assistance         @relation(fields: [assistantId], references: [id])
  mentorId              BigInt             @map("mentor_id") @db.UnsignedBigInt
  mentor                Mentor             @relation(fields: [mentorId], references: [id])
  userId                BigInt             @map("user_id") @db.UnsignedBigInt
  user                  User               @relation(fields: [userId], references: [id])
  sessionStartTimestamp DateTime           @map("session_start_timestamp")
  sessionEndTimestamp   DateTime           @map("session_end_timestamp")
  minutesDurations      Int                @map("minutes_duration") @db.UnsignedInt
  totalPrice            Decimal            @map("total_price") @db.Decimal(10, 3)
  transactionToken      String?            @map("transaction_token") @db.VarChar(255)
  orderStatus           OrderStatus        @default(PROCESSED) @map("order_status")
  orderPaymentStatus    OrderPaymentStatus @default(NOT_YET_PAID) @map("order_payment_status")
  meetingPlatform       String?            @map("meeting_platform")
  meetingPasskey        String?            @map("meeting_passkey")
  meetingLink           String?            @map("meeting_link")
  note                  String             @db.Text
  createdAt             DateTime           @default(now()) @map("created_at")
  Review                Review[]
  Invoice               Invoice[]

  @@map("orders")
}

model Review {
  id             BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  orderId        String           @map("order_id") @db.VarChar(255)
  Order          Order            @relation(fields: [orderId], references: [id])
  assistantId    BigInt           @map("assistant_id") @db.UnsignedBigInt
  Assistance     Assistance       @relation(fields: [assistantId], references: [id])
  rating         Decimal          @db.Decimal(3, 2)
  review         String           @db.Text
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime?        @map("updated_at")
  ReviewResource ReviewResource[]

  @@unique([orderId, assistantId])
  @@map("reviews")
}

model ReviewResource {
  id        BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  imagePath String? @map("image_path") @db.VarChar(255)
  videoUrl  String? @map("video_url") @db.VarChar(255)
  Review    Review  @relation(fields: [reviewId], references: [id])
  reviewId  BigInt  @map("order_review_id") @db.UnsignedBigInt

  @@map("review_resources")
}

model Language {
  id                 Int                  @id @default(autoincrement()) @db.UnsignedInt
  name               String               @unique @db.VarChar(255)
  AssistanceLanguage AssistanceLanguage[]

  @@map("languages")
}

model AssistanceLanguage {
  assistantId BigInt     @map("assistance_id") @db.UnsignedBigInt
  assistance  Assistance @relation(fields: [assistantId], references: [id])
  languageId  Int        @map("language_id") @db.UnsignedInt
  language    Language   @relation(fields: [languageId], references: [id])

  @@unique([languageId, assistantId])
  @@map("assistance_languages")
}

model Cart {
  id             BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  userId         BigInt           @unique @map("user_id") @db.UnsignedBigInt
  User           User             @relation(fields: [userId], references: [id])
  AssistanceCart AssistanceCart[]

  @@map("carts")
}

model AssistanceCart {
  assistantId   BigInt     @map("assistance_id") @db.UnsignedBigInt
  assistance    Assistance @relation(fields: [assistantId], references: [id])
  cartId        BigInt     @map("cart_id") @db.UnsignedBigInt
  cart          Cart       @relation(fields: [cartId], references: [id])
  sessionAmount Int        @map("session_amount") @db.UnsignedInt

  @@unique([assistantId, cartId])
  @@map("assistance_carts")
}

enum ChatStatus {
  SENT
  DELIVERED
  READ
}

model Chat {
  id                BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  originUserId      BigInt     @map("origin_user_id") @db.UnsignedBigInt
  originUser        User       @relation(fields: [originUserId], references: [id], name: "originUserRelation")
  destinationUserId BigInt     @map("destination_user_id") @db.UnsignedBigInt
  destinationUser   User       @relation(fields: [destinationUserId], references: [id], name: "destinationUserRelation")
  payloadMessage    String     @map("payload_message") @db.LongText
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime?  @map("updated_at")
  status            ChatStatus @default(SENT)
  isDeleted         Boolean    @default(false) @map("is_deleted")

  @@map("chats")
}

model OneTimePasswordToken {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  userId      BigInt   @map("user_id") @db.UnsignedBigInt
  User        User     @relation(fields: [userId], references: [id])
  hashedToken String   @map("hashed_token") @db.VarChar(255)
  expiresAt   DateTime @map("expires_at") @db.Timestamp()
  isValid     Boolean  @default(false) @map("is_valid")

  @@map("one_time_password_tokens")
}

model MentorAddress {
  id                  BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  mentorId            BigInt @unique @map("mentor_id") @db.UnsignedBigInt
  Mentor              Mentor @relation(fields: [mentorId], references: [id])
  street              String @db.VarChar(255)
  neighbourhoodNumber String @db.VarChar(10)
  hamletNumber        String @db.VarChar(10)
  village             String @db.VarChar(255)
  urbanVillage        String @db.VarChar(255)
  subDistrict         String @db.VarChar(255)
  district            String @db.VarChar(255)
  province            String @db.VarChar(255)

  @@map("mentor_addresses")
}

model MentorBankAccount {
  id                    BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  mentorId              BigInt            @map("mentor_id") @db.UnsignedBigInt
  Mentor                Mentor            @relation(fields: [mentorId], references: [id])
  accountHolderName     String            @map("account_holder_name") @db.VarChar(255)
  bankName              String            @map("bank_name") @db.VarChar(255)
  accountNumber         String            @map("account_number") @db.VarChar(255)
  paymentRecipientEmail String            @map("payment_recipient_email") @db.VarChar(255)
  WithdrawRequest       WithdrawRequest[]

  @@map("mentor_bank_accounts")
}

model MentorResource {
  id        BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  imagePath String? @map("image_path") @db.VarChar(255)
  videoUrl  String? @map("video_url") @db.VarChar(255)
  mentor    Mentor  @relation(fields: [mentorId], references: [id])
  mentorId  BigInt  @map("mentor_id") @db.UnsignedBigInt

  @@map("mentor_resources")
}

model TopUpBalance {
  id                 String             @id @default(uuid()) @db.VarChar(255)
  user               User               @relation(fields: [userId], references: [id])
  userId             BigInt             @map("user_id") @db.UnsignedBigInt
  transactionToken   String?            @map("transaction_token") @db.VarChar(255)
  balanceAmount      Int                @map("balance_amount") @db.UnsignedInt
  totalPrice         Decimal            @map("total_price") @db.Decimal(10, 3)
  orderPaymentStatus OrderPaymentStatus @default(NOT_YET_PAID) @map("order_payment_status")
  createdAt          DateTime           @default(now()) @map("created_at")

  @@map("top_up_balances")
}

enum WithdrawPaymentStatus {
  SENT
  APPROVED
  PROCESSED
}

model WithdrawRequest {
  id                    String                @id @default(uuid()) @db.VarChar(255)
  user                  User                  @relation(fields: [userId], references: [id])
  userId                BigInt                @map("user_id") @db.UnsignedBigInt
  mentor                Mentor                @relation(fields: [mentorId], references: [id])
  mentorId              BigInt                @map("mentor_id") @db.UnsignedBigInt
  mentorBankAccount     MentorBankAccount     @relation(fields: [mentorBankAccountId], references: [id])
  mentorBankAccountId   BigInt                @map("mentor_bank_account_id") @db.UnsignedBigInt
  totalBalance          Int                   @default(0) @map("total_balance") @db.UnsignedInt
  withdrawPaymentStatus WithdrawPaymentStatus @default(PROCESSED) @map("withdraw_payment_status")
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @default(now()) @map("updated_at")
  sentAt                DateTime?             @map("sent_at")

  @@map("withdraw_requests")
}

enum PaymentType {
  VIRTUAL_ACCOUNT
  PAYMENT_LINK
}

model Invoice {
  id          String      @id @default(uuid()) @db.VarChar(255)
  orderId     String      @map("order_id") @db.VarChar(255)
  Order       Order       @relation(fields: [orderId], references: [id])
  userId      BigInt      @unique @map("user_id") @db.UnsignedBigInt
  User        User        @relation(fields: [userId], references: [id])
  assistantId BigInt      @map("assistance_id") @db.UnsignedBigInt
  assistance  Assistance  @relation(fields: [assistantId], references: [id])
  dueDate     DateTime    @default(now()) @map("due_date")
  invoiceDate DateTime    @default(now()) @map("invoice_date")
  paymentType PaymentType @default(PAYMENT_LINK) @map("payment_type")
  note        String      @db.VarChar(255)

  @@unique([orderId, userId])
}
