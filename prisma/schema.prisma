// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserGender {
  MAN
  WOMAN
}
model User {
  id        BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  uniqueId  String     @unique @db.VarChar(512)
  name      String     @db.VarChar(255)
  gender    UserGender @default(MAN)
  email     String     @unique @db.VarChar(255)
  password  String     @db.VarChar(512)
  telephone String     @unique @db.VarChar(13)
  pin       String?    @db.Char(6)
  photoPath String?    @map("photo_path") @db.VarChar(255)
  Mentor    Mentor?
  Order     Order[]

  @@map("user")
}

model Mentor {
  id         BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  user       User         @relation(fields: [userId], references: [id])
  userId     BigInt       @unique @map("user_id") @db.UnsignedBigInt
  Experience Experience[]
  Education  Education[]
  Skill      Skill[]
  Assistance Assistance[]
  Order      Order[]

  @@map("mentors")
}

model Category {
  id         Int          @id @default(autoincrement()) @db.UnsignedInt
  name       String       @db.VarChar(255) @unique
  logo       String       @db.VarChar(255)
  Assistance Assistance[]
  Tag        Tag[]

  @@map("categories")
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  SELF_EMPLOYED
  FREELANCE
  CONTRACT
  INTERNSHIP
  APPRENTICESHIP
  SEASONAL
}

model Experience {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  positionName       String               @map("position_name") @db.VarChar(255)
  companyName        String               @map("company_name") @db.VarChar(255)
  employmentType     EmploymentType       @map("employment_type")
  location           String               @db.VarChar(255)
  startDate          DateTime             @map("start_date") @db.Date
  endDate            DateTime             @map("end_date") @db.Date
  description        String?              @db.Text
  mentorId           BigInt               @map("mentor_id") @db.UnsignedBigInt
  mentor             Mentor               @relation(fields: [mentorId], references: [id])
  ExperienceResource ExperienceResource[]

  @@map("experiences")
}

model ExperienceResource {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  imagePath    String?    @map("image_path") @db.VarChar(255)
  videoUrl     String?    @map("video_url") @db.VarChar(255)
  experience   Experience @relation(fields: [experienceId], references: [id])
  experienceId BigInt     @map("experience_id") @db.UnsignedBigInt

  @@map("experience_resources")
}

model Education {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  name        String   @db.VarChar(255)
  degree      String   @db.VarChar(255)
  studyField  String   @map("study_field") @db.VarChar(255)
  startDate   DateTime @map("start_date") @db.Date
  endDate     DateTime @map("end_date") @db.Date
  activity    String   @db.Text
  society     String   @db.Text
  description String   @db.Text
  mentorId    BigInt   @map("mentor_id") @db.UnsignedBigInt
  mentor      Mentor   @relation(fields: [mentorId], references: [id])

  @@map("educations")
}

model Skill {
  id          BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  name        String  @db.VarChar(100)
  description String? @db.Text
  mentorId    BigInt  @map("mentor_id") @db.UnsignedBigInt
  mentor      Mentor  @relation(fields: [mentorId], references: [id])

  @@map("skills")
}

model AssistanceResource {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  imagePath   String?    @map("image_path") @db.VarChar(255)
  videoUrl    String?    @map("video_url") @db.VarChar(255)
  assitance   Assistance @relation(fields: [assitanceId], references: [id])
  assitanceId BigInt     @map("assitance_id") @db.UnsignedBigInt

  @@map("assistance_resources")
}

enum AssistanceFormat {
  INDIVIDUAL
  GROUP
  HYBRID
}

model Tag {
  id             Int              @id @default(autoincrement()) @db.UnsignedInt
  name           String           @db.VarChar(255)
  icon           String           @db.VarChar(255)
  categoryId     Int              @map("category_id") @db.UnsignedInt
  category       Category         @relation(fields: [categoryId], references: [id])
  AssistanceTags AssistanceTags[]

  @@map("tags")
}

model Assistance {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  mentorId           BigInt               @map("mentor_id") @db.UnsignedBigInt
  mentor             Mentor               @relation(fields: [mentorId], references: [id])
  categoryId         Int                  @map("category_id") @db.UnsignedInt
  category           Category             @relation(fields: [categoryId], references: [id])
  topic              String               @db.VarChar(255)
  description        String               @db.Text
  durationMinutes    Int                  @map("duration_minutes") @db.UnsignedInt
  price              Int                  @db.UnsignedInt
  format             AssistanceFormat     @default(INDIVIDUAL)
  capacity           Int                  @db.UnsignedInt
  isActive           Boolean              @map("is_active") @default(true)
  ratingAverage      Decimal              @map("rating_average") @db.Decimal(3, 2) @default(0)
  language           String               @db.VarChar(100)
  Order              Order[]
  AssistanceTag      AssistanceTags[]
  AssistanceResource AssistanceResource[]
  createdAt          DateTime             @map("created_at") @default(now())
  updatedAt          DateTime             @map("updated_at") @default(now())

  @@map("assistants")
}

model AssistanceTags {
  assistanceId BigInt     @map("assistance_id") @db.UnsignedBigInt
  assistance   Assistance @relation(fields: [assistanceId], references: [id])
  tagId        Int        @map("tag_id") @db.UnsignedInt
  tag          Tag        @relation(fields: [tagId], references: [id])

  @@unique([tagId, assistanceId])
  @@map("assistance_tags")
}

enum OrderStatus {
  PROCESSED
  CONFIRMED
  FINISHED
  CANCELLED
}

enum OrderPaymentStatus {
  NOT_YET_PAID
  PAID
}

model Order {
  id                 String             @id @default(uuid()) @db.VarChar(255)
  assistanceId       BigInt             @map("assistance_id") @db.UnsignedBigInt
  assistance         Assistance         @relation(fields: [assistanceId], references: [id])
  mentorId           BigInt             @map("mentor_id") @db.UnsignedBigInt
  mentor             Mentor             @relation(fields: [mentorId], references: [id])
  userId             BigInt             @map("user_id") @db.UnsignedBigInt
  user               User               @relation(fields: [userId], references: [id])
  sessionTimestamp   DateTime           @map("session_timestamp")
  minutesDurations   Int                @map("minutes_duration") @db.UnsignedInt
  totalPrice         Decimal            @map("total_price") @db.Decimal(10, 3)
  transactionToken   String?            @map("transaction_token") @db.VarChar(255)
  orderStatus        OrderStatus        @map("order_status") @default(PROCESSED)
  orderPaymentStatus OrderPaymentStatus @map("order_payment_status") @default(NOT_YET_PAID)
  note               String             @db.Text
  createdAt          DateTime           @map("created_at") @default(now())
  OrderReview        OrderReview[]

  @@map("orders")
}

model OrderReview {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  orderId   String   @map("order_id") @db.VarChar(255)
  Order     Order    @relation(fields: [orderId], references: [id])
  rating    Decimal  @db.Decimal(3, 2)
  review    String   @db.Text
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at")

  @@map("order_review")
}
