// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum userGender {
  MAN
  WOMAN
}

model User {
  id        BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name      String     @db.VarChar(255)
  gender    userGender @default(MAN)
  email     String     @unique @db.VarChar(255)
  telephone String     @unique @db.VarChar(13)
  pin       String?    @db.Char(6)
  photoPath String?    @map("photo_path") @db.VarChar(255)
  Address   Address[]
  Store     Store[]
  Cart      Cart[]
  Order     Order[]

  @@map("users")
}

model Address {
  id           BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  label        String  @db.VarChar(30)
  detail       String  @db.VarChar(200)
  notes        String  @db.VarChar(45)
  receiverName String  @map("receiver_name") @db.VarChar(50)
  telephone    String  @db.VarChar(13)
  User         User    @relation(fields: [userId], references: [id])
  userId       BigInt  @map("user_id") @db.UnsignedBigInt
  Order        Order[]

  @@map("addresses")
}

model Store {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name         String    @db.VarChar(60)
  domain       String    @db.VarChar(24)
  slogan       String    @db.VarChar(48)
  locationName String    @map("location_name") @db.VarChar(25)
  city         String    @db.VarChar(50)
  zipCode      String    @map("zip_code") @db.Char(5)
  detail       String    @db.VarChar(200)
  description  String    @db.VarChar(140)
  photoPath    String?   @map("photo_path") @db.VarChar(255)
  User         User      @relation(fields: [userId], references: [id])
  userId       BigInt    @unique @map("user_id") @db.UnsignedBigInt
  Product      Product[]

  @@map("stores")
}

model Expedition {
  id    Int     @id @default(autoincrement()) @db.UnsignedSmallInt
  name  String  @db.VarChar(255)
  Order Order[]

  @@map("expeditions")
}

model Category {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  name            String            @db.VarChar(255)
  parentCategory  Category          @relation("parentChildCategory", fields: [categoryId], references: [id])
  Category        Category[]        @relation("parentChildCategory")
  categoryId      Int               @map("category_id") @db.UnsignedInt
  ProductCategory ProductCategory[]

  @@map("categories")
}

enum productCondition {
  NEW
  SECOND
}

enum productStatus {
  ACTIVE
  NON_ACTIVE
}

model Product {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  slug            String            @db.VarChar(50)
  name            String            @db.VarChar(50)
  condition       productCondition  @default(NEW)
  description     String?           @db.Text
  price           Int               @db.UnsignedInt
  minimumOrder    Int               @map("minimum_order") @db.SmallInt
  status          productStatus     @default(ACTIVE)
  stock           Int               @db.SmallInt
  sku             String            @db.VarChar(50)
  weight          Int               @db.Int
  width           Int               @db.Int
  height          Int               @db.Int
  Store           Store             @relation(fields: [storeId], references: [id])
  storeId         BigInt            @map("store_id") @db.UnsignedBigInt
  ProductResource ProductResource[]
  ProductsCarts   ProductsCarts[]
  ProductOrder    ProductOrder[]
  ProductCategory ProductCategory[]

  @@map("products")
}

model ProductCategory {
  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      @map("category_id") @db.UnsignedInt
  Product    Product  @relation(fields: [productId], references: [id])
  productId  BigInt   @map("product_id") @db.UnsignedBigInt

  @@unique([categoryId, productId])
  @@map("products_categories")
}

model ProductResource {
  id        BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  imagePath String? @map("image_path") @db.VarChar(255)
  videoUrl  String? @map("video_url") @db.VarChar(255)
  product   Product @relation(fields: [productId], references: [id])
  productId BigInt  @map("product_id") @db.UnsignedBigInt

  @@map("product_resources")
}

model Cart {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  user          User            @relation(fields: [userId], references: [id])
  userId        BigInt          @unique @map("user_id") @db.UnsignedBigInt
  ProductsCarts ProductsCarts[]

  @@map("carts")
}

model ProductsCarts {
  product   Product @relation(fields: [productId], references: [id])
  productId BigInt  @map("product_id") @db.UnsignedBigInt
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    BigInt  @map("cart_id") @db.UnsignedBigInt
  quantity  Int
  price     Int

  @@unique([productId, cartId])
  @@map("products_carts")
}

enum orderStatus {
  PROCESSED
  CONFIRMED
  SENT
  FINISHED
  CANCELLED
}

enum orderPaymentMethod {
  CASH_ON_DELIVERY
  TRANSFER
}

model Order {
  id            BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  totalPrice    Int                @map("total_price") @db.UnsignedMediumInt
  status        orderStatus        @default(PROCESSED)
  paymentMethod orderPaymentMethod
  createAt      DateTime           @default(now()) @map("create_at")
  address       Address            @relation(fields: [addressId], references: [id])
  addressId     BigInt             @map("address_id") @db.UnsignedBigInt
  expedition    Expedition         @relation(fields: [expeditionId], references: [id])
  expeditionId  Int                @map("expedition_id") @db.UnsignedSmallInt
  user          User               @relation(fields: [userId], references: [id])
  userId        BigInt             @map("user_id") @db.UnsignedBigInt
  ProductOrder  ProductOrder[]
}

model ProductOrder {
  product       Product @relation(fields: [productId], references: [id])
  productId     BigInt  @map("product_id") @db.UnsignedBigInt
  order         Order   @relation(fields: [orderId], references: [id])
  orderId       BigInt  @map("order_id") @db.UnsignedBigInt
  quantity      Int
  subTotalPrice Int     @map("sub_total_price")
  note          String? @db.VarChar(255)

  @@unique([productId, orderId])
  @@map("product_orders")
}
